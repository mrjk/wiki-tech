{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello World !","title":"Home"},{"location":"projects/","text":"So many projects This is a non exhaustive list of interesting projects. Cleaning process in progress... Beta: https://github.com/mrjk/paasify Lab Devops: https://github.com/mrjk/devbox https://github.com/mrjk/docker_resolver https://github.com/mrjk/civirt https://github.com/mrjk/rebootstrap https://github.com/mrjk/terraform-virt-modules https://github.com/mrjk/pkictl https://github.com/mrjk/ssl-vault https://github.com/mrjk/http-status-page Ansible Related: https://github.com/mrjk/ansible.utils https://github.com/mrjk/ansible-skel https://github.com/mrjk/ansible-plugins Ansible Roles: https://github.com/mrjk/ansible-role-keepalived-vrrp https://github.com/mrjk/ansible-role-dumpall https://github.com/mrjk/ansible-role-pkictl-mgr https://github.com/mrjk/ansible-role-sysadmin https://github.com/mrjk/ansible-role-keepalived-base https://github.com/mrjk/ansible-role-rabbitmq-cluster https://github.com/mrjk/ansible-role-rabbitmq-base https://github.com/mrjk/ansible-role-debug Personal: https://github.com/mrjk/wiki-tech https://github.com/mrjk/shell-scripts https://github.com/mrjk/linux-personal-env https://github.com/mrjk/barbu-by-jezu Deprecated: https://github.com/mrjk/easy-vagrant","title":"Index"},{"location":"projects/#so-many-projects","text":"This is a non exhaustive list of interesting projects. Cleaning process in progress... Beta: https://github.com/mrjk/paasify Lab Devops: https://github.com/mrjk/devbox https://github.com/mrjk/docker_resolver https://github.com/mrjk/civirt https://github.com/mrjk/rebootstrap https://github.com/mrjk/terraform-virt-modules https://github.com/mrjk/pkictl https://github.com/mrjk/ssl-vault https://github.com/mrjk/http-status-page Ansible Related: https://github.com/mrjk/ansible.utils https://github.com/mrjk/ansible-skel https://github.com/mrjk/ansible-plugins Ansible Roles: https://github.com/mrjk/ansible-role-keepalived-vrrp https://github.com/mrjk/ansible-role-dumpall https://github.com/mrjk/ansible-role-pkictl-mgr https://github.com/mrjk/ansible-role-sysadmin https://github.com/mrjk/ansible-role-keepalived-base https://github.com/mrjk/ansible-role-rabbitmq-cluster https://github.com/mrjk/ansible-role-rabbitmq-base https://github.com/mrjk/ansible-role-debug Personal: https://github.com/mrjk/wiki-tech https://github.com/mrjk/shell-scripts https://github.com/mrjk/linux-personal-env https://github.com/mrjk/barbu-by-jezu Deprecated: https://github.com/mrjk/easy-vagrant","title":"So many projects"},{"location":"wiki/Devops/Ansible/","text":"Ansible tips Jinja syntax Count the lenght of items: - hosts: localhost gather_facts: false vars: a_string: abcd1234 a_list: ['a', 'short', 'list'] a_dict: {'a': 'dictionary', 'with': 'values'} tasks: - debug: msg: | [ \"a_string length: {{ a_string | length }}\", \"a_list length: {{ a_list | length }}\", \"a_dict length: {{ a_dict | length }}\" ]","title":"Ansible tips"},{"location":"wiki/Devops/Ansible/#ansible-tips","text":"","title":"Ansible tips"},{"location":"wiki/Devops/Ansible/#jinja-syntax","text":"Count the lenght of items: - hosts: localhost gather_facts: false vars: a_string: abcd1234 a_list: ['a', 'short', 'list'] a_dict: {'a': 'dictionary', 'with': 'values'} tasks: - debug: msg: | [ \"a_string length: {{ a_string | length }}\", \"a_list length: {{ a_list | length }}\", \"a_dict length: {{ a_dict | length }}\" ]","title":"Jinja syntax"},{"location":"wiki/Linux/Docker/","text":"Docker Work with Docker docker info --format '{{json .Swarm }}' | jq . docker node ls --format '{{json .}}' | jq .","title":"Docker"},{"location":"wiki/Linux/Docker/#docker","text":"","title":"Docker"},{"location":"wiki/Linux/Docker/#work-with-docker","text":"docker info --format '{{json .Swarm }}' | jq . docker node ls --format '{{json .}}' | jq .","title":"Work with Docker"},{"location":"wiki/Linux/NetworkManager/","text":"NetworkManager Basic configurations Check status: systemctl status NetworkManager || systemctl status network-manager Advanced config Spoof wifi mac address Wifi mac adress anon and spoof: cat /etc/NetworkManager/conf.d/macspoof.conf # [connection] # wifi.cloned-mac-address=b2:ee:ff:aa:bb:e2 # wifi.scan-rand-mac-address=no # How to apply ? # systemctl restart NetworkManager # HOw to check status ? # macchanger -s wlp2s0 # ip link show wlp2s0 Split DNS setup This setup aims to setup basic infra for local development. Consists in: * Providing DNS * HTTP proxy There are few methods to do that: * Split DNS with systemd-resolved (See here ...) * NetworkManager + dnsmasq * Unbound NetworkManager + dnsmasq Tell networkmanager to run its own dnsmasq: cat /etc/NetworkManager/conf.d/dnsmasq.conf [main] dns=dnsmasq Configure dnsmasq: $ cat /etc/NetworkManager/dnsmasq.d/00-box.conf # This file directs dnsmasq to forward any request to resolve # names under the .homelab domain to 172.31.0.1, my # home DNS server. server=/box/10.127.0.10 # /etc/NetworkManager/dnsmasq.d/01-laplab.conf # This file sets up the local lablab domain and # defines some aliases and a wildcard. local=/laplab/ # The below defines a Wildcard DNS Entry. address=/.ose.laplab/192.168.101.125 # Below I define some host names. I also pull in address=/openshift.laplab/192.168.101.120 address=/openshift-int.laplab/192.168.101.120 # By default, the plugin does not read from /etc/hosts. # This forces the plugin to slurp in the file. # # If you didn't want to write to the /etc/hosts file. This could # be pointed to another file. # # addn-hosts=/etc/hosts Apply and check Reload Network-Manager: systemctl reload NetworkManager Check dnsmasq is really running: $ pstree -alup $(pidof NetworkManager) NetworkManager,1438674 --no-daemon \u251c\u2500dnsmasq,1441866,nobody --no-resolv --keep-in-foreground --no-hosts --bind-interfaces --pid-file=/var/run/NetworkManager/dnsmasq.pid --listen-address=127.0.0.1 --cache-size=400 --clear-on-reload --conf-file=/dev/null --proxy-dnssec --enable-dbus=org.freedesktop.NetworkManager.dnsmasq --conf-dir=/etc/NetworkManager/dnsmasq.d \u251c\u2500{NetworkManager},1438675 \u2514\u2500{NetworkManager},1438676 Check dnsmasq is really listening: netstat -lntpu | grep 1:53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 1441866/dnsmasq udp 0 0 127.0.0.1:53 0.0.0.0:* 1441866/dnsmasq Check dnsmasq is really working: dig @10.127.0.10 toto.box dig toto.box ping toto.box","title":"NetworkManager"},{"location":"wiki/Linux/NetworkManager/#networkmanager","text":"","title":"NetworkManager"},{"location":"wiki/Linux/NetworkManager/#basic-configurations","text":"Check status: systemctl status NetworkManager || systemctl status network-manager","title":"Basic configurations"},{"location":"wiki/Linux/NetworkManager/#advanced-config","text":"","title":"Advanced config"},{"location":"wiki/Linux/NetworkManager/#spoof-wifi-mac-address","text":"Wifi mac adress anon and spoof: cat /etc/NetworkManager/conf.d/macspoof.conf # [connection] # wifi.cloned-mac-address=b2:ee:ff:aa:bb:e2 # wifi.scan-rand-mac-address=no # How to apply ? # systemctl restart NetworkManager # HOw to check status ? # macchanger -s wlp2s0 # ip link show wlp2s0","title":"Spoof wifi mac address"},{"location":"wiki/Linux/NetworkManager/#split-dns-setup","text":"This setup aims to setup basic infra for local development. Consists in: * Providing DNS * HTTP proxy There are few methods to do that: * Split DNS with systemd-resolved (See here ...) * NetworkManager + dnsmasq * Unbound","title":"Split DNS setup"},{"location":"wiki/Linux/NetworkManager/#networkmanager-dnsmasq","text":"Tell networkmanager to run its own dnsmasq: cat /etc/NetworkManager/conf.d/dnsmasq.conf [main] dns=dnsmasq Configure dnsmasq: $ cat /etc/NetworkManager/dnsmasq.d/00-box.conf # This file directs dnsmasq to forward any request to resolve # names under the .homelab domain to 172.31.0.1, my # home DNS server. server=/box/10.127.0.10 # /etc/NetworkManager/dnsmasq.d/01-laplab.conf # This file sets up the local lablab domain and # defines some aliases and a wildcard. local=/laplab/ # The below defines a Wildcard DNS Entry. address=/.ose.laplab/192.168.101.125 # Below I define some host names. I also pull in address=/openshift.laplab/192.168.101.120 address=/openshift-int.laplab/192.168.101.120 # By default, the plugin does not read from /etc/hosts. # This forces the plugin to slurp in the file. # # If you didn't want to write to the /etc/hosts file. This could # be pointed to another file. # # addn-hosts=/etc/hosts","title":"NetworkManager + dnsmasq"},{"location":"wiki/Linux/NetworkManager/#apply-and-check","text":"Reload Network-Manager: systemctl reload NetworkManager Check dnsmasq is really running: $ pstree -alup $(pidof NetworkManager) NetworkManager,1438674 --no-daemon \u251c\u2500dnsmasq,1441866,nobody --no-resolv --keep-in-foreground --no-hosts --bind-interfaces --pid-file=/var/run/NetworkManager/dnsmasq.pid --listen-address=127.0.0.1 --cache-size=400 --clear-on-reload --conf-file=/dev/null --proxy-dnssec --enable-dbus=org.freedesktop.NetworkManager.dnsmasq --conf-dir=/etc/NetworkManager/dnsmasq.d \u251c\u2500{NetworkManager},1438675 \u2514\u2500{NetworkManager},1438676 Check dnsmasq is really listening: netstat -lntpu | grep 1:53 tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 1441866/dnsmasq udp 0 0 127.0.0.1:53 0.0.0.0:* 1441866/dnsmasq Check dnsmasq is really working: dig @10.127.0.10 toto.box dig toto.box ping toto.box","title":"Apply and check"},{"location":"wiki/Linux/OneLiners/","text":"One LIners List of oneliners Linux Collection of oneliners, stolen from: https://gist.github.com/mrjk/93b923ba97b71ca4226ac13048318685 Docker List all containers and their IPs docker ps -q | xargs -n 1 docker inspect --format '{{ .Name }} {{range .NetworkSettings.Networks}} {{.IPAddress}}{{end}}' | sed 's#^/##'; Networking Webservers python3 -m http.server 8000 python2 -m SimpleHTTPServer 8000 php -S 127.0.0.1:8000 busybox httpd -f -p 8000 ruby -run -ehttpd . -p8000 # TCP connection nc ... Converters yaml2json python3 -c 'import sys, yaml; yaml.dump(yaml.safe_load(sys.stdin), sys.stdout)' Ideas/TODO: See: https://www.digitalocean.com/community/tutorials/how-to-use-netcat-to-establish-and-test-tcp-and-udp-connections","title":"One LIners"},{"location":"wiki/Linux/OneLiners/#one-liners","text":"List of oneliners","title":"One LIners"},{"location":"wiki/Linux/OneLiners/#linux","text":"Collection of oneliners, stolen from: https://gist.github.com/mrjk/93b923ba97b71ca4226ac13048318685","title":"Linux"},{"location":"wiki/Linux/OneLiners/#docker","text":"List all containers and their IPs docker ps -q | xargs -n 1 docker inspect --format '{{ .Name }} {{range .NetworkSettings.Networks}} {{.IPAddress}}{{end}}' | sed 's#^/##';","title":"Docker"},{"location":"wiki/Linux/OneLiners/#networking","text":"Webservers python3 -m http.server 8000 python2 -m SimpleHTTPServer 8000 php -S 127.0.0.1:8000 busybox httpd -f -p 8000 ruby -run -ehttpd . -p8000 # TCP connection nc ...","title":"Networking"},{"location":"wiki/Linux/OneLiners/#converters","text":"yaml2json python3 -c 'import sys, yaml; yaml.dump(yaml.safe_load(sys.stdin), sys.stdout)'","title":"Converters"},{"location":"wiki/Linux/OneLiners/#ideastodo","text":"See: https://www.digitalocean.com/community/tutorials/how-to-use-netcat-to-establish-and-test-tcp-and-udp-connections","title":"Ideas/TODO:"},{"location":"wiki/Linux/PythonDev/","text":"Liste de bonnes pratiques ici","title":"PythonDev"},{"location":"wiki/Linux/SystemdNetwork/","text":"Systemd-network This describes a possible network setup for a Debian 11 server. Under Debian like distros, three way to manage network: Old /etc/networks/interfaces{,.d} files NetworkManager service Systemd-network interfaces, under `` Systemd network resources: Debian manual: https://wiki.debian.org/SystemdNetworkd Disabling other network manager Disable Network Manager: systemctl disable --now NetworkManager And ensure network scripts are empty (under Debian based OSes) $ tree /etc/network/interfaces* /etc/network/interfaces [error opening dir] /etc/network/interfaces.d 0 directories, 0 files systemctl status systemd-networkd systemctl disable --noNetworkManager.service Basic networking Enable and check systemd: systemctl enable systemd-networkd systemctl status systemd-networkd Basic DHCP network: $ cat /etc/systemd/network/99-default.network [Match] Name = en* eth* [Network] DHCP = yes When a files has been modified, there is no reload : systemctl restart systemd-networkd DHCP and statics IPs on the same interface $ cat /etc/systemd/network/50-server1.network [Match] Name=enp1s0 [Network] DHCP=yes Address=192.168.42.16/24 Address=192.168.42.17/24 Address=192.168.42.18/24 Address=192.168.42.19/24 #DNS=8.8.8.8 #DNS=8.8.4.4 Other stuffs Some other stuffs to try. Local bridge with static IP Let's create a new netwdev unit: $ cat /etc/systemd/network/20-br_cloud.netdev [NetDev] Name=br_cloud Kind=bridge # To avoid random mac at each boot # MACAddress=xx:xx:xx:xx:xx:xx [Bridge] STP=false With an IP: $ cat /etc/systemd/network/21-br_cloud.network [Match] Name=br_cloud [Network] Address=10.1.0.11/24 ConfigureWithoutCarrier=yes","title":"Systemd-network"},{"location":"wiki/Linux/SystemdNetwork/#systemd-network","text":"This describes a possible network setup for a Debian 11 server. Under Debian like distros, three way to manage network: Old /etc/networks/interfaces{,.d} files NetworkManager service Systemd-network interfaces, under `` Systemd network resources: Debian manual: https://wiki.debian.org/SystemdNetworkd","title":"Systemd-network"},{"location":"wiki/Linux/SystemdNetwork/#disabling-other-network-manager","text":"Disable Network Manager: systemctl disable --now NetworkManager And ensure network scripts are empty (under Debian based OSes) $ tree /etc/network/interfaces* /etc/network/interfaces [error opening dir] /etc/network/interfaces.d 0 directories, 0 files systemctl status systemd-networkd systemctl disable --noNetworkManager.service","title":"Disabling other network manager"},{"location":"wiki/Linux/SystemdNetwork/#basic-networking","text":"Enable and check systemd: systemctl enable systemd-networkd systemctl status systemd-networkd Basic DHCP network: $ cat /etc/systemd/network/99-default.network [Match] Name = en* eth* [Network] DHCP = yes When a files has been modified, there is no reload : systemctl restart systemd-networkd","title":"Basic networking"},{"location":"wiki/Linux/SystemdNetwork/#dhcp-and-statics-ips-on-the-same-interface","text":"$ cat /etc/systemd/network/50-server1.network [Match] Name=enp1s0 [Network] DHCP=yes Address=192.168.42.16/24 Address=192.168.42.17/24 Address=192.168.42.18/24 Address=192.168.42.19/24 #DNS=8.8.8.8 #DNS=8.8.4.4","title":"DHCP and statics IPs on the same interface"},{"location":"wiki/Linux/SystemdNetwork/#other-stuffs","text":"Some other stuffs to try.","title":"Other stuffs"},{"location":"wiki/Linux/SystemdNetwork/#local-bridge-with-static-ip","text":"Let's create a new netwdev unit: $ cat /etc/systemd/network/20-br_cloud.netdev [NetDev] Name=br_cloud Kind=bridge # To avoid random mac at each boot # MACAddress=xx:xx:xx:xx:xx:xx [Bridge] STP=false With an IP: $ cat /etc/systemd/network/21-br_cloud.network [Match] Name=br_cloud [Network] Address=10.1.0.11/24 ConfigureWithoutCarrier=yes","title":"Local bridge with static IP"},{"location":"wiki/Linux/firewalld/","text":"Firewalld Links: * https://docs.rockylinux.org/de/guides/security/firewalld-beginners/ Basics Ensure the firewalld service is running: systemctl enable --now firewalld Let's check current status: # systemctl status firewalld \u25cf firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2022-02-23 12:36:26 EST; 1 months 10 days ago Docs: man:firewalld(1) Main PID: 23834 (firewalld) Tasks: 3 (limit: 5065) Memory: 9.7M CGroup: /system.slice/firewalld.service \u2514\u250023834 /usr/libexec/platform-python -s /usr/sbin/firewalld --nofork --nopid # firewall-cmd --state running # firewall-cmd --list-all public (active) target: default icmp-block-inversion: no interfaces: ens3 sources: services: cockpit consul_api_dns consul_api_http consul_lan_serf consul_rpc consul_wan_serf dhcpv6-client dns docker-swarm glusterfs http https node_exporter ssh ports: 9100/tcp protocols: forward: no masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: We have a running service and some firewalld services. After any permanent changes, you need to reload the firewall: firewall-cmd --reload Note: If you reload your configurations that haven't been made permanent, they'll disappear on you. List all opened ports firewall-cmd --list-ports To get an overview of effectively opened ports: for i in $(firewall-cmd --list-services); do echo \"Service: $i\" ;firewall-cmd --info-service $i | grep ' ports:' ; done ; echo \"Direct ports:\"; firewall-cmd --list-ports Modifications Using services Direct port firewall-cmd --permanent --add-port=22/TCP firewall-cmd --reload firewall-cmd --add-port=22/tcp # To save it permanently firewall-cmd --runtime-to-permanent","title":"Firewalld"},{"location":"wiki/Linux/firewalld/#firewalld","text":"Links: * https://docs.rockylinux.org/de/guides/security/firewalld-beginners/","title":"Firewalld"},{"location":"wiki/Linux/firewalld/#basics","text":"Ensure the firewalld service is running: systemctl enable --now firewalld Let's check current status: # systemctl status firewalld \u25cf firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2022-02-23 12:36:26 EST; 1 months 10 days ago Docs: man:firewalld(1) Main PID: 23834 (firewalld) Tasks: 3 (limit: 5065) Memory: 9.7M CGroup: /system.slice/firewalld.service \u2514\u250023834 /usr/libexec/platform-python -s /usr/sbin/firewalld --nofork --nopid # firewall-cmd --state running # firewall-cmd --list-all public (active) target: default icmp-block-inversion: no interfaces: ens3 sources: services: cockpit consul_api_dns consul_api_http consul_lan_serf consul_rpc consul_wan_serf dhcpv6-client dns docker-swarm glusterfs http https node_exporter ssh ports: 9100/tcp protocols: forward: no masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: We have a running service and some firewalld services. After any permanent changes, you need to reload the firewall: firewall-cmd --reload Note: If you reload your configurations that haven't been made permanent, they'll disappear on you. List all opened ports firewall-cmd --list-ports To get an overview of effectively opened ports: for i in $(firewall-cmd --list-services); do echo \"Service: $i\" ;firewall-cmd --info-service $i | grep ' ports:' ; done ; echo \"Direct ports:\"; firewall-cmd --list-ports","title":"Basics"},{"location":"wiki/Linux/firewalld/#modifications","text":"","title":"Modifications"},{"location":"wiki/Linux/firewalld/#using-services","text":"","title":"Using services"},{"location":"wiki/Linux/firewalld/#direct-port","text":"firewall-cmd --permanent --add-port=22/TCP firewall-cmd --reload firewall-cmd --add-port=22/tcp # To save it permanently firewall-cmd --runtime-to-permanent","title":"Direct port"},{"location":"wiki/Linux/ssh/","text":"SSH SSH with git To load a custom key: GIT_SSH_COMMAND='ssh -v -i ssh_keys/deploy-scripts@bitbucket_rsa4096_20210727 -o IdentitiesOnly=yes' git clone git@gitlab.example:7999/project/deploy-scripts.git","title":"SSH"},{"location":"wiki/Linux/ssh/#ssh","text":"","title":"SSH"},{"location":"wiki/Linux/ssh/#ssh-with-git","text":"To load a custom key: GIT_SSH_COMMAND='ssh -v -i ssh_keys/deploy-scripts@bitbucket_rsa4096_20210727 -o IdentitiesOnly=yes' git clone git@gitlab.example:7999/project/deploy-scripts.git","title":"SSH with git"},{"location":"wiki/MySQL/sql-cheat/","text":"SQL Cheat Sheet Sources: * https://devhints.io/mysql CRUD operations Update one or many fields: UPDATE table1 SET field1=new_value1 WHERE condition; UPDATE table1, table2 SET field1=new_value1, field2=new_value2, ... WHERE table1.id1 = table2.id2 AND condition;","title":"SQL Cheat Sheet"},{"location":"wiki/MySQL/sql-cheat/#sql-cheat-sheet","text":"Sources: * https://devhints.io/mysql","title":"SQL Cheat Sheet"},{"location":"wiki/MySQL/sql-cheat/#crud-operations","text":"Update one or many fields: UPDATE table1 SET field1=new_value1 WHERE condition; UPDATE table1, table2 SET field1=new_value1, field2=new_value2, ... WHERE table1.id1 = table2.id2 AND condition;","title":"CRUD operations"},{"location":"wiki/Notes/ExplainedShortly/","text":"Learn quickly new techs Vim: Comprendre comment Vim d\u00e9marre: https://thevaluable.dev/vim-runtime-guide-example/ Firewalld: Getting started: https://docs.rockylinux.org/de/guides/security/firewalld-beginners/ Operations: https://www.liquidweb.com/kb/an-introduction-to-firewalld/ Ceph: Fundamentals: https://louwrentius.com/understanding-ceph-open-source-scalable-storage.html Nomad: Quickstart: https://medium.com/hashicorp-engineering/hashicorp-nomad-from-zero-to-wow-1615345aa539 Nomad in dev mode Introduction to jobs Integration with Consul Integration with Fabio jsonnet: https://faun.pub/quick-start-and-debugging-in-jsonnet-28a711da6d7f https://learnxinyminutes.com/docs/jsonnet/","title":"Learn quickly new techs"},{"location":"wiki/Notes/ExplainedShortly/#learn-quickly-new-techs","text":"Vim: Comprendre comment Vim d\u00e9marre: https://thevaluable.dev/vim-runtime-guide-example/ Firewalld: Getting started: https://docs.rockylinux.org/de/guides/security/firewalld-beginners/ Operations: https://www.liquidweb.com/kb/an-introduction-to-firewalld/ Ceph: Fundamentals: https://louwrentius.com/understanding-ceph-open-source-scalable-storage.html Nomad: Quickstart: https://medium.com/hashicorp-engineering/hashicorp-nomad-from-zero-to-wow-1615345aa539 Nomad in dev mode Introduction to jobs Integration with Consul Integration with Fabio jsonnet: https://faun.pub/quick-start-and-debugging-in-jsonnet-28a711da6d7f https://learnxinyminutes.com/docs/jsonnet/","title":"Learn quickly new techs"},{"location":"wiki/Notes/Git/","text":"Git Tips and tricks Delete a branch locally, then remotely: git branch -d mybranch git push origin --delete mybranch Cleanup unexinsting branches: git remote prune origin --dry-run git remote prune origin Find heavy commits in a git repo ( source ): git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | cut -c 1-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest","title":"Git"},{"location":"wiki/Notes/Git/#git","text":"","title":"Git"},{"location":"wiki/Notes/Git/#tips-and-tricks","text":"Delete a branch locally, then remotely: git branch -d mybranch git push origin --delete mybranch Cleanup unexinsting branches: git remote prune origin --dry-run git remote prune origin Find heavy commits in a git repo ( source ): git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | cut -c 1-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest","title":"Tips and tricks"},{"location":"wiki/Notes/LongLiners/","text":"Long Liners List all docker container IPs and ports: function dip() { _print_container_info() { local container_id local container_ports local container_ip local container_name container_id=\"${1}\" container_ports=( $(docker port \"$container_id\" | grep -o \"0.0.0.0:.*\" | cut -f2 -d:) ) container_name=\"$(docker inspect --format \"{{ .Name }}\" \"$container_id\" | sed 's/\\///')\" container_ip=\"$(docker inspect --format \"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\" \"$container_id\")\" printf \"%-13s %-40s %-20s %-80s\\n\" \"$container_id\" \"$container_name\" \"$container_ip\" \"${container_ports[*]}\" } local container_id container_id=\"$1\" printf \"%-13s %-40s %-20s %-80s\\n\" 'Container Id' 'Container Name' 'Container IP' 'Container Ports' if [ -z \"$container_id\" ]; then local container_id docker ps -a --format \"{{.ID}}\" | while read -r container_id ; do _print_container_info \"$container_id\" done else _print_container_info \"$container_id\" fi }","title":"Long Liners"},{"location":"wiki/Notes/LongLiners/#long-liners","text":"List all docker container IPs and ports: function dip() { _print_container_info() { local container_id local container_ports local container_ip local container_name container_id=\"${1}\" container_ports=( $(docker port \"$container_id\" | grep -o \"0.0.0.0:.*\" | cut -f2 -d:) ) container_name=\"$(docker inspect --format \"{{ .Name }}\" \"$container_id\" | sed 's/\\///')\" container_ip=\"$(docker inspect --format \"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\" \"$container_id\")\" printf \"%-13s %-40s %-20s %-80s\\n\" \"$container_id\" \"$container_name\" \"$container_ip\" \"${container_ports[*]}\" } local container_id container_id=\"$1\" printf \"%-13s %-40s %-20s %-80s\\n\" 'Container Id' 'Container Name' 'Container IP' 'Container Ports' if [ -z \"$container_id\" ]; then local container_id docker ps -a --format \"{{.ID}}\" | while read -r container_id ; do _print_container_info \"$container_id\" done else _print_container_info \"$container_id\" fi }","title":"Long Liners"},{"location":"wiki/Notes/MacOSX/","text":"MacOSX tricks One liners Equivalent of nestat -lntp : netstat -p tcp -van | grep '^Proto\\|LISTEN' netstat -p udp -van | grep '\\.[0-9]'","title":"MacOSX tricks"},{"location":"wiki/Notes/MacOSX/#macosx-tricks","text":"","title":"MacOSX tricks"},{"location":"wiki/Notes/MacOSX/#one-liners","text":"Equivalent of nestat -lntp : netstat -p tcp -van | grep '^Proto\\|LISTEN' netstat -p udp -van | grep '\\.[0-9]'","title":"One liners"},{"location":"wiki/Notes/NoCoreUtils/","text":"No Core Utils Sometimes, while troubleshooting containers, you are lacking of some most basic commands, such as ping, ifconfig/ip commands. This guide is intended for running containers, when it's already too late. Core utils alternatives Test if a TCP is open or not $ telnet $host $port $ (echo >/dev/tcp/$host/$port) &>/dev/null && echo \"open\" || echo \"closed\" Alternative images Usually you will want this to troublehoot network issue. This image provides a bunch of tools of network troubleshooting. You can inject # No persistancy docker run --rm -ti --network barbu wbitt/network-multitool:latest /bin/bash # As daemon docker run -d -n netdebug wbitt/network-multitool docker exec -it netdebug /bin/bash Install coreutils temporarly We can download static builds of busybox/toybox: $ wget http://landley.net/toybox/bin/toybox-i686 -O /usr/local/bin/toybox ; chmod +x /usr/local/bin/toybox To list all available commands: $ toybox Then you can use this way: toybox ping google.com toybox netstat -lntpu toybox telnet toto.com 80 Tips and tricks Get a root mysql shell: mysql -p$MYSQL_ROOT_PASSWORD mysqldump -p$MYSQL_ROOT_PASSWORD DATABASE | less watch -n 0.2 mysqladmin -p$MYSQL_ROOT_PASSWORD proc","title":"No Core Utils"},{"location":"wiki/Notes/NoCoreUtils/#no-core-utils","text":"Sometimes, while troubleshooting containers, you are lacking of some most basic commands, such as ping, ifconfig/ip commands. This guide is intended for running containers, when it's already too late.","title":"No Core Utils"},{"location":"wiki/Notes/NoCoreUtils/#core-utils-alternatives","text":"","title":"Core utils alternatives"},{"location":"wiki/Notes/NoCoreUtils/#test-if-a-tcp-is-open-or-not","text":"$ telnet $host $port $ (echo >/dev/tcp/$host/$port) &>/dev/null && echo \"open\" || echo \"closed\"","title":"Test if a TCP is open or not"},{"location":"wiki/Notes/NoCoreUtils/#alternative-images","text":"Usually you will want this to troublehoot network issue. This image provides a bunch of tools of network troubleshooting. You can inject # No persistancy docker run --rm -ti --network barbu wbitt/network-multitool:latest /bin/bash # As daemon docker run -d -n netdebug wbitt/network-multitool docker exec -it netdebug /bin/bash","title":"Alternative images"},{"location":"wiki/Notes/NoCoreUtils/#install-coreutils-temporarly","text":"We can download static builds of busybox/toybox: $ wget http://landley.net/toybox/bin/toybox-i686 -O /usr/local/bin/toybox ; chmod +x /usr/local/bin/toybox To list all available commands: $ toybox Then you can use this way: toybox ping google.com toybox netstat -lntpu toybox telnet toto.com 80","title":"Install coreutils temporarly"},{"location":"wiki/Notes/NoCoreUtils/#tips-and-tricks","text":"Get a root mysql shell: mysql -p$MYSQL_ROOT_PASSWORD mysqldump -p$MYSQL_ROOT_PASSWORD DATABASE | less watch -n 0.2 mysqladmin -p$MYSQL_ROOT_PASSWORD proc","title":"Tips and tricks"},{"location":"wiki/Notes/OneLiners/","text":"One Liners Docker","title":"One Liners"},{"location":"wiki/Notes/OneLiners/#one-liners","text":"","title":"One Liners"},{"location":"wiki/Notes/OneLiners/#docker","text":"","title":"Docker"},{"location":"wiki/Notes/VPNUsers/","text":"VPN as users This page is relevant when you have to deal with corporate VPN and associated stuffs. Force split tunneling Split tunneling allows you to access your local network resources, even if your VPN provider does not allow it. The trick of those VPN client is to remove locale routes and keep only the local router route. There are few scenarios: The VPN client does not remove LAN routes: You are fine, you are already in split tunneling The VPN client remove LAN routes: You can manually add the route after the VPN started The VPN client enforce removal of LAN routes: When a route is added, the VPN client will remove it straight after it has been added. Be aware that bypassing your VPN policy may expose your VPN network, or make your IT security team unhappy. But hopefully, this is completely transparent, and there is no way to see that you are bypassing those policy from a network point of view. Not enforced Route Removal This setup is relevant when you have only one pizzabox that connect to the VPN, but you don't want to work on that pizzabox. MacOSX The command is the folllowing: sudo route -n add -net NETWORK/MASK ROUTER As examples: sudo route -n add -net 192.168.0.1/24 192.168.0.1 sudo route -n add -net 10.0.0.0/8 192.168.0.254 If you want to change the default route: route delete default route add default 192.168.0.1 Enforced Route Removal For this scenario, you need to have control on your LAN router. Allow SSH connections Easiest scenario is to have a SSH access on your router, which is easy if you run OpenWRT,OPNSense or any linux based router that provides a SSH access. If no SSH is available, you will need to forward internally a SSH port to your pizzabox from the router IP. Port forward should be something like: 192.168.0.1:2222 -> pizzabox:22 Then configure your SSH client to access your pizzabox, either by: setting up your router as a SSH jumphost setting up your SSH client on the forwarded port of your router. Check you can access your pizza box via SSH when the VPN is connected. If that works, we can leverage sshuttle . Of course, you can access to you local LAN resources by doing the same thing, but in the other way (but it will not be practical if you're using port forwqarding) Expose VPN resources via sshuttle sshuttle will create a SSH tunnel to your pizzabox: sshuttle -v --remote pizzabox-via-router 10.55.0.0/16 10.50.58.0/24 142.117.120.0/22 142.117.244.0/22 142.117.120.0/22 10.36.100.0/22 10.36.132.0/22 10.50.50.0/24 142.182.130.85/22 142.112.0.0/12 142.182.0.0/16 You can add the --dns option if you also want to forward the DNS traffic. Expose web resources The trick here is to configure your browser to use a socks proxy ssh -vv -N -D 7777 pizzabox Then you can configure your favorite browser to use a socks proxy on 127.0.0.1:7777 Expose more resources You can set SSH reverse proxy, for example to access to your socks resources, here we want to access to barrier server: ssh -vv -N -R 24800:localhost:24800 pizzabox On the client side, you just have to connect to localhost:24800 instead of pizzabox:24800 Pizzabox tools There is a list of useful tools to have: SSH listening on port 22 SOCKS proxy (for web access) dnsmasq instance, for DNS traffic (to resolve any VPN domains) Barrier, for software KVM dnsmasq Run a dnsmasq instance locally: /usr/local/Cellar/dnsmasq/2.86/sbin/dnsmasq --no-daemon --listen-address=127.0.0.1 --port 5353","title":"VPN as users"},{"location":"wiki/Notes/VPNUsers/#vpn-as-users","text":"This page is relevant when you have to deal with corporate VPN and associated stuffs.","title":"VPN as users"},{"location":"wiki/Notes/VPNUsers/#force-split-tunneling","text":"Split tunneling allows you to access your local network resources, even if your VPN provider does not allow it. The trick of those VPN client is to remove locale routes and keep only the local router route. There are few scenarios: The VPN client does not remove LAN routes: You are fine, you are already in split tunneling The VPN client remove LAN routes: You can manually add the route after the VPN started The VPN client enforce removal of LAN routes: When a route is added, the VPN client will remove it straight after it has been added. Be aware that bypassing your VPN policy may expose your VPN network, or make your IT security team unhappy. But hopefully, this is completely transparent, and there is no way to see that you are bypassing those policy from a network point of view.","title":"Force split tunneling"},{"location":"wiki/Notes/VPNUsers/#not-enforced-route-removal","text":"This setup is relevant when you have only one pizzabox that connect to the VPN, but you don't want to work on that pizzabox.","title":"Not enforced Route Removal"},{"location":"wiki/Notes/VPNUsers/#macosx","text":"The command is the folllowing: sudo route -n add -net NETWORK/MASK ROUTER As examples: sudo route -n add -net 192.168.0.1/24 192.168.0.1 sudo route -n add -net 10.0.0.0/8 192.168.0.254 If you want to change the default route: route delete default route add default 192.168.0.1","title":"MacOSX"},{"location":"wiki/Notes/VPNUsers/#enforced-route-removal","text":"For this scenario, you need to have control on your LAN router.","title":"Enforced Route Removal"},{"location":"wiki/Notes/VPNUsers/#allow-ssh-connections","text":"Easiest scenario is to have a SSH access on your router, which is easy if you run OpenWRT,OPNSense or any linux based router that provides a SSH access. If no SSH is available, you will need to forward internally a SSH port to your pizzabox from the router IP. Port forward should be something like: 192.168.0.1:2222 -> pizzabox:22 Then configure your SSH client to access your pizzabox, either by: setting up your router as a SSH jumphost setting up your SSH client on the forwarded port of your router. Check you can access your pizza box via SSH when the VPN is connected. If that works, we can leverage sshuttle . Of course, you can access to you local LAN resources by doing the same thing, but in the other way (but it will not be practical if you're using port forwqarding)","title":"Allow SSH connections"},{"location":"wiki/Notes/VPNUsers/#expose-vpn-resources-via-sshuttle","text":"sshuttle will create a SSH tunnel to your pizzabox: sshuttle -v --remote pizzabox-via-router 10.55.0.0/16 10.50.58.0/24 142.117.120.0/22 142.117.244.0/22 142.117.120.0/22 10.36.100.0/22 10.36.132.0/22 10.50.50.0/24 142.182.130.85/22 142.112.0.0/12 142.182.0.0/16 You can add the --dns option if you also want to forward the DNS traffic.","title":"Expose VPN resources via sshuttle"},{"location":"wiki/Notes/VPNUsers/#expose-web-resources","text":"The trick here is to configure your browser to use a socks proxy ssh -vv -N -D 7777 pizzabox Then you can configure your favorite browser to use a socks proxy on 127.0.0.1:7777","title":"Expose web resources"},{"location":"wiki/Notes/VPNUsers/#expose-more-resources","text":"You can set SSH reverse proxy, for example to access to your socks resources, here we want to access to barrier server: ssh -vv -N -R 24800:localhost:24800 pizzabox On the client side, you just have to connect to localhost:24800 instead of pizzabox:24800","title":"Expose more resources"},{"location":"wiki/Notes/VPNUsers/#pizzabox-tools","text":"There is a list of useful tools to have: SSH listening on port 22 SOCKS proxy (for web access) dnsmasq instance, for DNS traffic (to resolve any VPN domains) Barrier, for software KVM","title":"Pizzabox tools"},{"location":"wiki/Notes/VPNUsers/#dnsmasq","text":"Run a dnsmasq instance locally: /usr/local/Cellar/dnsmasq/2.86/sbin/dnsmasq --no-daemon --listen-address=127.0.0.1 --port 5353","title":"dnsmasq"},{"location":"wiki/OPNSense/basics/","text":"Basics setups Unbound Local domain management Many cases: * Use unbound * To assign DNS zones to IPs (A/CNAME records) * To assign authoritatives DNS zones (SOA/NS records ?) * Use dnsmasq * Todo Hosts overrides Go to: Services > Unbound > Overrides , in the Hosts overrides: Host Domain Type Value Description * infra.dev A 192.168.42.10 * apps.dev A 192.168.42.11 * apps.pro A 192.168.42.11 Domains overrides Go to: Services > Unbound > Overrides , in the Hosts overrides: Domain Ip Description infra.apps 192.168.42.10 k3s.apps 192.168.42.10 k8s.apps 192.168.42.10 DNSmasq config TODO","title":"Basics setups"},{"location":"wiki/OPNSense/basics/#basics-setups","text":"","title":"Basics setups"},{"location":"wiki/OPNSense/basics/#unbound","text":"","title":"Unbound"},{"location":"wiki/OPNSense/basics/#local-domain-management","text":"Many cases: * Use unbound * To assign DNS zones to IPs (A/CNAME records) * To assign authoritatives DNS zones (SOA/NS records ?) * Use dnsmasq * Todo","title":"Local domain management"},{"location":"wiki/OPNSense/basics/#hosts-overrides","text":"Go to: Services > Unbound > Overrides , in the Hosts overrides: Host Domain Type Value Description * infra.dev A 192.168.42.10 * apps.dev A 192.168.42.11 * apps.pro A 192.168.42.11","title":"Hosts overrides"},{"location":"wiki/OPNSense/basics/#domains-overrides","text":"Go to: Services > Unbound > Overrides , in the Hosts overrides: Domain Ip Description infra.apps 192.168.42.10 k3s.apps 192.168.42.10 k8s.apps 192.168.42.10","title":"Domains overrides"},{"location":"wiki/OPNSense/basics/#dnsmasq-config","text":"TODO","title":"DNSmasq config"},{"location":"wiki/OpenWRT/backup/","text":"Backup and restore OpenWRT Extra tools sysopkg: See: https://forum.openwrt.org/t/how-to-keep-packages-settings-after-upgrading/38998 Newer versions now implement this. Default backup configuration My backup configuration: # Source: https://gist.github.com/mrjk/93b923ba97b71ca4226ac13048318685 ## JEZ_VERSION=2021_09_06_01 # Documentation # ======================= # This file contains files and directories that should # be preserved during an upgrade. # Generate backup: # /usr/sbin/sysopkg write # umask go= # sysupgrade -b /tmp/backup-${HOSTNAME}-$(date +%F).tar.gz # Restore backup: # sysupgrade -r /tmp/backup-*.tar.gz # /usr/sbin/sysopkg install # Base OpenWRT # ======================= # Preserve this file configuration file /etc/sysupgrade.conf # Backup root directory /root # Backup SSH keys for autossh /etc/ssh/ # Preserve shell files /etc/profile.d/ # Other files # ======================= # Support for sysopkg /usr/sbin/sysopkg /etc/opkg/packages.list # Support for autossh # See: https://openwrt.org/docs/guide-user/services/ssh/autossh#run_as_service /etc/init.d/autossh","title":"Backup and restore OpenWRT"},{"location":"wiki/OpenWRT/backup/#backup-and-restore-openwrt","text":"","title":"Backup and restore OpenWRT"},{"location":"wiki/OpenWRT/backup/#extra-tools","text":"sysopkg: See: https://forum.openwrt.org/t/how-to-keep-packages-settings-after-upgrading/38998 Newer versions now implement this.","title":"Extra tools"},{"location":"wiki/OpenWRT/backup/#default-backup-configuration","text":"My backup configuration: # Source: https://gist.github.com/mrjk/93b923ba97b71ca4226ac13048318685 ## JEZ_VERSION=2021_09_06_01 # Documentation # ======================= # This file contains files and directories that should # be preserved during an upgrade. # Generate backup: # /usr/sbin/sysopkg write # umask go= # sysupgrade -b /tmp/backup-${HOSTNAME}-$(date +%F).tar.gz # Restore backup: # sysupgrade -r /tmp/backup-*.tar.gz # /usr/sbin/sysopkg install # Base OpenWRT # ======================= # Preserve this file configuration file /etc/sysupgrade.conf # Backup root directory /root # Backup SSH keys for autossh /etc/ssh/ # Preserve shell files /etc/profile.d/ # Other files # ======================= # Support for sysopkg /usr/sbin/sysopkg /etc/opkg/packages.list # Support for autossh # See: https://openwrt.org/docs/guide-user/services/ssh/autossh#run_as_service /etc/init.d/autossh","title":"Default backup configuration"},{"location":"wiki/OpenWRT/base/","text":"OpenWRT Stuffs Update and upgrade all packages: opkg list-upgradable | cut -f 1 -d ' ' | xargs -r echo opkg upgrade","title":"OpenWRT"},{"location":"wiki/OpenWRT/base/#openwrt","text":"","title":"OpenWRT"},{"location":"wiki/OpenWRT/base/#stuffs","text":"Update and upgrade all packages: opkg list-upgradable | cut -f 1 -d ' ' | xargs -r echo opkg upgrade","title":"Stuffs"},{"location":"wiki/OpenWRT/hardware/","text":"Hardware TP-Link Archer C7 Diffrences between A7 and C7: https://www.tp-link.com/us/compare/?typeId=9&productIds=26649%2C31387 Model: root@OpenWrt:~# dmesg | grep -i machin [ 0.000000] MIPS: machine is TP-Link Archer C7 v2 root@OpenWrt:~# cat /etc/os-release NAME=\"OpenWrt\" VERSION=\"21.02.2\" ID=\"openwrt\" ID_LIKE=\"lede openwrt\" PRETTY_NAME=\"OpenWrt 21.02.2\" VERSION_ID=\"21.02.2\" HOME_URL=\"https://openwrt.org/\" BUG_URL=\"https://bugs.openwrt.org/\" SUPPORT_URL=\"https://forum.openwrt.org/\" BUILD_ID=\"r16495-bf0c965af0\" OPENWRT_BOARD=\"ath79/generic\" OPENWRT_ARCH=\"mips_24kc\" OPENWRT_TAINTS=\"\" OPENWRT_DEVICE_MANUFACTURER=\"OpenWrt\" OPENWRT_DEVICE_MANUFACTURER_URL=\"https://openwrt.org/\" OPENWRT_DEVICE_PRODUCT=\"Generic\" OPENWRT_DEVICE_REVISION=\"v0\" OPENWRT_RELEASE=\"OpenWrt 21.02.2 r16495-bf0c965af0\" Bad performances of C7 v2 Sources: https://forum.openwrt.org/t/please-consider-ath10k-non-ct-drivers-instead-of-ct/85051 https://forum.openwrt.org/t/why-the-switch-to-unstable-ath10k-ct/27258/39 https://forum.openwrt.org/t/why-the-switch-to-unstable-ath10k-ct/27258/8 https://forum.openwrt.org/t/changing-to-non-ct-drivers-via-opkg/64070 https://github.com/greearb/ath10k-ct/issues/139 Poor wifi performances since 2019: # opkg list-installed | grep ath10k ath10k-board-qca988x - 20211216-1 ath10k-firmware-qca988x-ct - 2020-11-08-1 kmod-ath10k-ct - 5.4.179+2021-09-22-e6a7d5b5-1 # opkg remove ath10k-firmware-qca988x-ct kmod-ath10k-ct Removing package ath10k-firmware-qca988x-ct from root... Removing package kmod-ath10k-ct from root... # opkg list-installed | grep ath10k ath10k-board-qca988x - 20211216-1 # opkg install ath10k-firmware-qca988x kmod-ath10k Installing ath10k-firmware-qca988x (20211216-1) to root... Downloading https://downloads.openwrt.org/releases/21.02.2/packages/mips_24kc/base/ath10k-firmware-qca988x_20211216-1_mips_24kc.ipk Installing kmod-ath10k (5.4.179+5.10.85-1-1) to root... Downloading https://downloads.openwrt.org/releases/21.02.2/targets/ath79/generic/packages/kmod-ath10k_5.4.179%2b5.10.85-1-1_mips_24kc.ipk Configuring kmod-ath10k. Configuring ath10k-firmware-qca988x. # reboot Then: # dmesg|grep firmware [ 0.348797] 0x000000020000-0x000000ff0000 : \"firmware\" [ 0.356593] 2 tplink-fw partitions found on MTD device firmware [ 0.362635] Creating 2 MTD partitions on \"firmware\": [ 15.532206] ath10k_pci 0000:00:00.0: firmware ver 10.2.4-1.0-00047 api 5 features no-p2p,raw-mode,mfp,allows-mesh-bcast crc32 35bd9258 [ 35.741643] ath10k_pci 0000:00:00.0: pdev param 0 not supported by firmware","title":"Hardware"},{"location":"wiki/OpenWRT/hardware/#hardware","text":"","title":"Hardware"},{"location":"wiki/OpenWRT/hardware/#tp-link-archer-c7","text":"Diffrences between A7 and C7: https://www.tp-link.com/us/compare/?typeId=9&productIds=26649%2C31387 Model: root@OpenWrt:~# dmesg | grep -i machin [ 0.000000] MIPS: machine is TP-Link Archer C7 v2 root@OpenWrt:~# cat /etc/os-release NAME=\"OpenWrt\" VERSION=\"21.02.2\" ID=\"openwrt\" ID_LIKE=\"lede openwrt\" PRETTY_NAME=\"OpenWrt 21.02.2\" VERSION_ID=\"21.02.2\" HOME_URL=\"https://openwrt.org/\" BUG_URL=\"https://bugs.openwrt.org/\" SUPPORT_URL=\"https://forum.openwrt.org/\" BUILD_ID=\"r16495-bf0c965af0\" OPENWRT_BOARD=\"ath79/generic\" OPENWRT_ARCH=\"mips_24kc\" OPENWRT_TAINTS=\"\" OPENWRT_DEVICE_MANUFACTURER=\"OpenWrt\" OPENWRT_DEVICE_MANUFACTURER_URL=\"https://openwrt.org/\" OPENWRT_DEVICE_PRODUCT=\"Generic\" OPENWRT_DEVICE_REVISION=\"v0\" OPENWRT_RELEASE=\"OpenWrt 21.02.2 r16495-bf0c965af0\"","title":"TP-Link Archer C7"},{"location":"wiki/OpenWRT/hardware/#bad-performances-of-c7-v2","text":"Sources: https://forum.openwrt.org/t/please-consider-ath10k-non-ct-drivers-instead-of-ct/85051 https://forum.openwrt.org/t/why-the-switch-to-unstable-ath10k-ct/27258/39 https://forum.openwrt.org/t/why-the-switch-to-unstable-ath10k-ct/27258/8 https://forum.openwrt.org/t/changing-to-non-ct-drivers-via-opkg/64070 https://github.com/greearb/ath10k-ct/issues/139 Poor wifi performances since 2019: # opkg list-installed | grep ath10k ath10k-board-qca988x - 20211216-1 ath10k-firmware-qca988x-ct - 2020-11-08-1 kmod-ath10k-ct - 5.4.179+2021-09-22-e6a7d5b5-1 # opkg remove ath10k-firmware-qca988x-ct kmod-ath10k-ct Removing package ath10k-firmware-qca988x-ct from root... Removing package kmod-ath10k-ct from root... # opkg list-installed | grep ath10k ath10k-board-qca988x - 20211216-1 # opkg install ath10k-firmware-qca988x kmod-ath10k Installing ath10k-firmware-qca988x (20211216-1) to root... Downloading https://downloads.openwrt.org/releases/21.02.2/packages/mips_24kc/base/ath10k-firmware-qca988x_20211216-1_mips_24kc.ipk Installing kmod-ath10k (5.4.179+5.10.85-1-1) to root... Downloading https://downloads.openwrt.org/releases/21.02.2/targets/ath79/generic/packages/kmod-ath10k_5.4.179%2b5.10.85-1-1_mips_24kc.ipk Configuring kmod-ath10k. Configuring ath10k-firmware-qca988x. # reboot Then: # dmesg|grep firmware [ 0.348797] 0x000000020000-0x000000ff0000 : \"firmware\" [ 0.356593] 2 tplink-fw partitions found on MTD device firmware [ 0.362635] Creating 2 MTD partitions on \"firmware\": [ 15.532206] ath10k_pci 0000:00:00.0: firmware ver 10.2.4-1.0-00047 api 5 features no-p2p,raw-mode,mfp,allows-mesh-bcast crc32 35bd9258 [ 35.741643] ath10k_pci 0000:00:00.0: pdev param 0 not supported by firmware","title":"Bad performances of C7 v2"}]}